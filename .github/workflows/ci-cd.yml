name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: lonicflex-multi-agent

jobs:
  # Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run security scanner
      run: npm run demo-security-scanner
      continue-on-error: true
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-reports/
        retention-days: 30

  # Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: npm run demo-db
      
    - name: Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        
    - name: Run integration tests
      run: npm run demo-testing-framework
      env:
        NODE_ENV: test
        
    - name: Generate coverage report
      run: npm run coverage --if-present
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 30

  # Performance Tests
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run demo-performance
      
    - name: Run load tests
      run: |
        npm start &
        sleep 10
        npx artillery quick --count 10 --num 5 http://localhost:3000/health
      
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: performance-reports/
        retention-days: 30

  # Build Docker Image
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run deployment script
      run: npm run deploy:dev
      env:
        ENVIRONMENT: development
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        
    - name: Run smoke tests
      run: npm run test:smoke
      env:
        TEST_URL: ${{ vars.DEV_URL }}
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'Development deployment ${{ job.status }}'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create backup
      run: npm run demo-backup
      env:
        BACKUP_TARGET: staging
        
    - name: Run deployment script
      run: npm run deploy:staging
      env:
        ENVIRONMENT: staging
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        TEST_URL: ${{ vars.STAGING_URL }}
        
    - name: Run security tests
      run: npm run test:security
      env:
        TARGET_URL: ${{ vars.STAGING_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create production backup
      run: npm run demo-backup
      env:
        BACKUP_TARGET: production
        BACKUP_TYPE: full
        
    - name: Run pre-deployment checks
      run: |
        npm run health-check
        npm run connectivity-check
        
    - name: Deploy with blue-green strategy
      run: npm run deploy:production
      env:
        ENVIRONMENT: production
        DEPLOYMENT_STRATEGY: blue-green
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        
    - name: Run post-deployment tests
      run: |
        npm run test:smoke
        npm run test:integration
        npm run test:performance
      env:
        TEST_URL: ${{ vars.PRODUCTION_URL }}
        
    - name: Update monitoring
      run: |
        curl -X POST "${{ vars.MONITORING_WEBHOOK }}" \
          -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
          -d '{"event": "deployment", "environment": "production", "version": "${{ github.event.release.tag_name }}"}'
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: '🚀 Production deployment successful - Version ${{ github.event.release.tag_name }}'

  # Rollback Job (manual trigger)
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Execute rollback
      run: npm run rollback:production
      env:
        ROLLBACK_VERSION: ${{ github.event.inputs.version }}
        
    - name: Verify rollback
      run: npm run test:smoke
      env:
        TEST_URL: ${{ vars.PRODUCTION_URL }}
        
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            channel: '#alerts',
            attachments: [{
              color: 'warning',
              title: '⚠️ Production Rollback Executed',
              text: 'Production has been rolled back to version ${{ github.event.inputs.version }}',
              footer: 'LonicFLex CI/CD'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-dev, deploy-staging, deploy-production]
    
    steps:
    - name: Delete old Docker images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 10
        
    - name: Cleanup old workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 10